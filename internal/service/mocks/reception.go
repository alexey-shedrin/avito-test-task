// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/reception.go
//
// Generated by this command:
//
//	mockgen -source=internal/handler/reception.go -destination=internal/service/mocks/reception.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/alexey-shedrin/avito-test-task/internal/model/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockReceptionService is a mock of ReceptionService interface.
type MockReceptionService struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionServiceMockRecorder
	isgomock struct{}
}

// MockReceptionServiceMockRecorder is the mock recorder for MockReceptionService.
type MockReceptionServiceMockRecorder struct {
	mock *MockReceptionService
}

// NewMockReceptionService creates a new mock instance.
func NewMockReceptionService(ctrl *gomock.Controller) *MockReceptionService {
	mock := &MockReceptionService{ctrl: ctrl}
	mock.recorder = &MockReceptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionService) EXPECT() *MockReceptionServiceMockRecorder {
	return m.recorder
}

// CloseLastReception mocks base method.
func (m *MockReceptionService) CloseLastReception(pvzID uuid.UUID) (*entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLastReception", pvzID)
	ret0, _ := ret[0].(*entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseLastReception indicates an expected call of CloseLastReception.
func (mr *MockReceptionServiceMockRecorder) CloseLastReception(pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLastReception", reflect.TypeOf((*MockReceptionService)(nil).CloseLastReception), pvzID)
}

// CreateProduct mocks base method.
func (m *MockReceptionService) CreateProduct(product *entity.Product, pvzID uuid.UUID) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", product, pvzID)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockReceptionServiceMockRecorder) CreateProduct(product, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockReceptionService)(nil).CreateProduct), product, pvzID)
}

// CreateReception mocks base method.
func (m *MockReceptionService) CreateReception(reception *entity.Reception) (*entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", reception)
	ret0, _ := ret[0].(*entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockReceptionServiceMockRecorder) CreateReception(reception any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockReceptionService)(nil).CreateReception), reception)
}

// DeleteLastProduct mocks base method.
func (m *MockReceptionService) DeleteLastProduct(pvzID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", pvzID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockReceptionServiceMockRecorder) DeleteLastProduct(pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockReceptionService)(nil).DeleteLastProduct), pvzID)
}
