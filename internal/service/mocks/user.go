// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/handler/user.go -destination=internal/service/mocks/user.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	request "github.com/alexey-shedrin/avito-test-task/internal/model/dto/request"
	response "github.com/alexey-shedrin/avito-test-task/internal/model/dto/response"
	entity "github.com/alexey-shedrin/avito-test-task/internal/model/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// DummyLogin mocks base method.
func (m *MockUserService) DummyLogin(arg0 *request.DummyLogin) (*response.DummyLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyLogin", arg0)
	ret0, _ := ret[0].(*response.DummyLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyLogin indicates an expected call of DummyLogin.
func (mr *MockUserServiceMockRecorder) DummyLogin(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLogin", reflect.TypeOf((*MockUserService)(nil).DummyLogin), arg0)
}

// Login mocks base method.
func (m *MockUserService) Login(arg0 *request.Login) (*response.Login, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(*response.Login)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), arg0)
}

// Register mocks base method.
func (m *MockUserService) Register(arg0 *request.Register) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), arg0)
}
